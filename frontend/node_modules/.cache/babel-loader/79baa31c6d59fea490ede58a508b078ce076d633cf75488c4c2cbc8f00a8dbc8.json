{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-17cc8201\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Record and Translate\", -1 /* HOISTED */));\nconst _hoisted_2 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.recordAndTranslate && $options.recordAndTranslate(...args))\n  }, \"Record and Translate\"), $data.recognizedText ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"p\", null, \"Recognized: \" + _toDisplayString($data.recognizedText), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Translated: \" + _toDisplayString($data.translatedText), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_createElementVNode","key","_createElementBlock","_hoisted_1","onClick","_cache","args","$options","recordAndTranslate","$data","recognizedText","_hoisted_2","_toDisplayString","translatedText","_createCommentVNode"],"sources":["B:\\Kyro Project\\Speech Recognition Project\\frontend\\src\\components\\Record.vue"],"sourcesContent":["<!-- <template>\r\n  <div>\r\n    <h1>Speech Recognition and Translation App</h1>\r\n    <button @click=\"recordAndTranslate\" :disabled=\"recording\">Record and Translate</button>\r\n    <p v-if=\"recognizedText\">Recognized: {{ recognizedText }}</p>\r\n    <p v-if=\"translatedText\">Translated: {{ translatedText }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      recognizedText: '',\r\n      translatedText: '',\r\n      recording: false,\r\n      recognition: null,\r\n    };\r\n  },\r\n  methods: {\r\n    async recordAndTranslate() {\r\n      if (this.recording) return; // Prevent multiple recordings\r\n\r\n      this.recording = true;\r\n      this.recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n      this.recognition.lang = 'en-US';\r\n      this.recognition.interimResults = false;\r\n      this.recognition.maxAlternatives = 1;\r\n\r\n      this.recognition.start();\r\n\r\n      this.recognition.onresult = async (event) => {\r\n        const speechResult = event.results[0][0].transcript.trim();\r\n        console.log('Result: ', speechResult);\r\n\r\n        try {\r\n          const response = await fetch('/record', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ text: speechResult }),\r\n          });\r\n\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            this.recognizedText = data.recognized;\r\n            this.translatedText = data.translated;\r\n          } else {\r\n            console.error('Failed to fetch translation.');\r\n          }\r\n        } catch (error) {\r\n          console.error('Error in fetch:', error);\r\n        } finally {\r\n          this.recognition.stop();\r\n          this.recording = false;\r\n        }\r\n      };\r\n\r\n      this.recognition.onerror = (event) => {\r\n        console.error('Error occurred in recognition: ', event.error);\r\n        this.recognition.stop();\r\n        this.recording = false;\r\n      };\r\n    },\r\n  },\r\n  beforeDestroy() {\r\n    if (this.recognition) {\r\n      this.recognition.stop();\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n/* Add your styles here */\r\n</style> -->\r\n\r\n\r\n<template>\r\n  <div>\r\n    <h1>Record and Translate</h1>\r\n    <button @click=\"recordAndTranslate\">Record and Translate</button>\r\n    <div v-if=\"recognizedText\">\r\n      <p>Recognized: {{ recognizedText }}</p>\r\n      <p>Translated: {{ translatedText }}</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      recognizedText: null,\r\n      translatedText: null,\r\n    };\r\n  },\r\n  methods: {\r\n    async recordAndTranslate() {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/record', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n          },\r\n          // Optionally, send data if needed\r\n          // body: JSON.stringify({})\r\n          // body: JSON.stringify({ user_id: this.userId })\r\n        });\r\n        const data = await response.json();\r\n        this.recognizedText = data.recognized;\r\n        this.translatedText = data.translated;\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Your component-specific styles here */\r\n</style>\r\n"],"mappings":";;gEAiFIA,mBAAA,CAA6B,YAAzB,sBAAoB;;EAjF5BC,GAAA;AAAA;;uBAgFEC,mBAAA,CAOM,cANJC,UAA6B,EAC7BH,mBAAA,CAAiE;IAAxDI,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,kBAAA,IAAAD,QAAA,CAAAC,kBAAA,IAAAF,IAAA,CAAkB;KAAE,sBAAoB,GAC7CG,KAAA,CAAAC,cAAc,I,cAAzBR,mBAAA,CAGM,OAtFVS,UAAA,GAoFMX,mBAAA,CAAuC,WAApC,cAAY,GAAAY,gBAAA,CAAGH,KAAA,CAAAC,cAAc,kBAChCV,mBAAA,CAAuC,WAApC,cAAY,GAAAY,gBAAA,CAAGH,KAAA,CAAAI,cAAc,iB,KArFtCC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}