{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Speech Recognition and Translation App\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.recordAndTranslate && $options.recordAndTranslate(...args))\n  }, \"Record and Translate\"), $data.recognizedText ? (_openBlock(), _createElementBlock(\"p\", _hoisted_2, \"Recognized: \" + _toDisplayString($data.recognizedText), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $data.translatedText ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, \"Translated: \" + _toDisplayString($data.translatedText), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_createElementVNode","key","_createElementBlock","_hoisted_1","onClick","_cache","args","$options","recordAndTranslate","$data","recognizedText","_hoisted_2","_toDisplayString","_createCommentVNode","translatedText","_hoisted_3"],"sources":["B:\\Kyro Project\\Speech Recognition Project\\frontend\\src\\components\\Record.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1>Speech Recognition and Translation App</h1>\r\n      <button @click=\"recordAndTranslate\">Record and Translate</button>\r\n      <p v-if=\"recognizedText\">Recognized: {{ recognizedText }}</p>\r\n      <p v-if=\"translatedText\">Translated: {{ translatedText }}</p>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        recognizedText: '',\r\n        translatedText: ''\r\n      };\r\n    },\r\n    methods: {\r\n      async recordAndTranslate() {\r\n        const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n        recognition.lang = 'en-US';\r\n        recognition.interimResults = false;\r\n        recognition.maxAlternatives = 1;\r\n  \r\n        recognition.start();\r\n  \r\n        recognition.onresult = async (event) => {\r\n          const speechResult = event.results[0][0].transcript;\r\n          console.log('Result:', speechResult);\r\n  \r\n          try {\r\n            const response = await fetch('/record', {\r\n              method: 'GET',\r\n              headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify({ text: speechResult })\r\n            });\r\n  \r\n            if (response.ok) {\r\n              const data = await response.json();\r\n              this.recognizedText = data.recognized;\r\n              this.translatedText = data.translated;\r\n            } else {\r\n              console.error('Failed to fetch translation.');\r\n            }\r\n          } catch (error) {\r\n            console.error('An error occurred:', error);\r\n          }\r\n        };\r\n  \r\n        recognition.onerror = (event) => {\r\n          console.error('Error occurred in recognition:', event.error);\r\n        };\r\n  \r\n        recognition.onend = () => {\r\n          recognition.stop();\r\n        };\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style>\r\n  /* Add your styles here */\r\n  </style>\r\n  "],"mappings":";gCAEMA,mBAAA,CAA+C,YAA3C,wCAAsC;;EAFhDC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;uBACIC,mBAAA,CAKM,cAJJC,UAA+C,EAC/CH,mBAAA,CAAiE;IAAxDI,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,kBAAA,IAAAD,QAAA,CAAAC,kBAAA,IAAAF,IAAA,CAAkB;KAAE,sBAAoB,GAC/CG,KAAA,CAAAC,cAAc,I,cAAvBR,mBAAA,CAA6D,KAJnES,UAAA,EAI+B,cAAY,GAAAC,gBAAA,CAAGH,KAAA,CAAAC,cAAc,oBAJ5DG,mBAAA,gBAKeJ,KAAA,CAAAK,cAAc,I,cAAvBZ,mBAAA,CAA6D,KALnEa,UAAA,EAK+B,cAAY,GAAAH,gBAAA,CAAGH,KAAA,CAAAK,cAAc,oBAL5DD,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}