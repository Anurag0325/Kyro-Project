{"ast":null,"code":"export default {\n  data() {\n    return {\n      top3Phrases: []\n    };\n  },\n  methods: {\n    async fetchTop3Phrases() {\n      try {\n        const userId = 1; // Replace with dynamic user ID retrieval\n        const response = await fetch(`http://localhost:5000/top-3-phrases?user_id=${userId}`);\n        if (response.ok) {\n          const data = await response.json();\n          this.top3Phrases = data.top_3_phrases;\n        } else {\n          console.error('Failed to fetch top 3 phrases:', await response.json());\n        }\n      } catch (error) {\n        console.error('Error fetching top 3 phrases:', error);\n      }\n    },\n    startPolling() {\n      this.fetchTop3Phrases();\n      setInterval(this.fetchTop3Phrases, 2000); // Poll every 5 seconds\n    }\n  },\n  mounted() {\n    this.fetchTop3Phrases();\n    this.startPolling();\n  }\n};","map":{"version":3,"names":["data","top3Phrases","methods","fetchTop3Phrases","userId","response","fetch","ok","json","top_3_phrases","console","error","startPolling","setInterval","mounted"],"sources":["B:\\Kyro Project\\Speech Recognition Project\\frontend\\src\\components\\Top3Phrases.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>Top 3 Unique Phrases</h2>\r\n      <ul>\r\n        <li v-for=\"(phrase, index) in top3Phrases\" :key=\"index\">\r\n          {{ phrase[0] }} - {{ phrase[1] }} times\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        top3Phrases: []\r\n      };\r\n    },\r\n    methods: {\r\n      async fetchTop3Phrases() {\r\n        try {\r\n          const userId = 1; // Replace with dynamic user ID retrieval\r\n          const response = await fetch(`http://localhost:5000/top-3-phrases?user_id=${userId}`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            this.top3Phrases = data.top_3_phrases;\r\n          } else {\r\n            console.error('Failed to fetch top 3 phrases:', await response.json());\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching top 3 phrases:', error);\r\n        }\r\n      },\r\n      startPolling() {\r\n        this.fetchTop3Phrases();\r\n        setInterval(this.fetchTop3Phrases, 2000); // Poll every 5 seconds\r\n      }\r\n    },\r\n    mounted() {\r\n      this.fetchTop3Phrases();\r\n      this.startPolling();\r\n    },\r\n\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Add any necessary styles here */\r\n  </style>\r\n  "],"mappings":"AAYE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,gBAAgBA,CAAA,EAAG;MACvB,IAAI;QACF,MAAMC,MAAK,GAAI,CAAC,EAAE;QAClB,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,+CAA+CF,MAAM,EAAE,CAAC;QACrF,IAAIC,QAAQ,CAACE,EAAE,EAAE;UACf,MAAMP,IAAG,GAAI,MAAMK,QAAQ,CAACG,IAAI,CAAC,CAAC;UAClC,IAAI,CAACP,WAAU,GAAID,IAAI,CAACS,aAAa;QACvC,OAAO;UACLC,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAE,MAAMN,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;QACxE;MACF,EAAE,OAAOG,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IACDC,YAAYA,CAAA,EAAG;MACb,IAAI,CAACT,gBAAgB,CAAC,CAAC;MACvBU,WAAW,CAAC,IAAI,CAACV,gBAAgB,EAAE,IAAI,CAAC,EAAE;IAC5C;EACF,CAAC;EACDW,OAAOA,CAAA,EAAG;IACR,IAAI,CAACX,gBAAgB,CAAC,CAAC;IACvB,IAAI,CAACS,YAAY,CAAC,CAAC;EACrB;AAEF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}