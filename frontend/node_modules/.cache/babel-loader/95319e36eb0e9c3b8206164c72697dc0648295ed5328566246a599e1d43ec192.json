{"ast":null,"code":"import Record from './Record.vue';\nimport WordFrequencies from './WordFrequencies.vue';\nimport Top3Phrases from './Top3Phrases.vue';\nexport default {\n  components: {\n    Record,\n    WordFrequencies,\n    Top3Phrases\n  },\n  data() {\n    return {\n      wordFrequencies: null,\n      top3Phrases: []\n    };\n  },\n  methods: {\n    async fetchData() {\n      await this.fetchWordFrequencies();\n      await this.fetchTop3Phrases();\n    },\n    async fetchWordFrequencies() {\n      try {\n        const response = await fetch('http://localhost:5000/word-frequencies', {\n          method: 'GET',\n          credentials: 'include'\n        });\n        if (response.ok) {\n          this.wordFrequencies = await response.json();\n        } else {\n          console.error('Failed to fetch word frequencies:', await response.json());\n        }\n      } catch (error) {\n        console.error('Error fetching word frequencies:', error);\n      }\n    },\n    async fetchTop3Phrases() {\n      try {\n        const response = await fetch('http://localhost:5000/top-3-phrases', {\n          method: 'GET',\n          credentials: 'include'\n        });\n        if (response.ok) {\n          this.top3Phrases = await response.json();\n        } else {\n          console.error('Failed to fetch top 3 phrases:', await response.json());\n        }\n      } catch (error) {\n        console.error('Error fetching top 3 phrases:', error);\n      }\n    },\n    async logout() {\n      try {\n        const response = await fetch('http://localhost:5000/logout', {\n          method: 'GET',\n          credentials: 'include'\n        });\n        if (response.ok) {\n          // Redirect to home page after logout\n          window.location.href = '/';\n        } else {\n          console.error('Failed to logout:', await response.json());\n        }\n      } catch (error) {\n        console.error('Error logging out:', error);\n      }\n    }\n  },\n  mounted() {\n    this.fetchData();\n    setInterval(this.fetchData, 5000); // Poll every 5 seconds\n  }\n};","map":{"version":3,"names":["Record","WordFrequencies","Top3Phrases","components","data","wordFrequencies","top3Phrases","methods","fetchData","fetchWordFrequencies","fetchTop3Phrases","response","fetch","method","credentials","ok","json","console","error","logout","window","location","href","mounted","setInterval"],"sources":["B:\\Kyro Project\\Voice Analyzer\\frontend\\src\\components\\Dashboard.vue"],"sourcesContent":["<!-- <template>\r\n    <div>\r\n      <h1>Dashboard</h1>\r\n      <Record @dataUpdated=\"fetchData\" />\r\n      <WordFrequencies :wordFrequencies=\"wordFrequencies\" />\r\n      <Top3Phrases :top3Phrases=\"top3Phrases\" />\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import Record from './Record.vue';\r\n  import WordFrequencies from './WordFrequencies.vue';\r\n  import Top3Phrases from './Top3Phrases.vue';\r\n  \r\n  export default {\r\n    components: {\r\n      Record,\r\n      WordFrequencies,\r\n      Top3Phrases,\r\n    },\r\n    data() {\r\n      return {\r\n        wordFrequencies: null,\r\n        top3Phrases: [],\r\n      };\r\n    },\r\n    methods: {\r\n      async fetchData() {\r\n        await this.fetchWordFrequencies();\r\n        await this.fetchTop3Phrases();\r\n      },\r\n      async fetchWordFrequencies() {\r\n        try {\r\n          const response = await fetch('http://localhost:5000/word-frequencies', {\r\n            method: 'GET',\r\n            credentials: 'include'\r\n          });\r\n          if (response.ok) {\r\n            this.wordFrequencies = await response.json();\r\n          } else {\r\n            console.error('Failed to fetch word frequencies:', await response.json());\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching word frequencies:', error);\r\n        }\r\n      },\r\n      async fetchTop3Phrases() {\r\n        try {\r\n          const response = await fetch('http://localhost:5000/top-3-phrases', {\r\n            method: 'GET',\r\n            credentials: 'include'\r\n          });\r\n          if (response.ok) {\r\n            this.top3Phrases = await response.json();\r\n          } else {\r\n            console.error('Failed to fetch top 3 phrases:', await response.json());\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching top 3 phrases:', error);\r\n        }\r\n      },\r\n    },\r\n    mounted() {\r\n      this.fetchData();\r\n      setInterval(this.fetchData, 5000); // Poll every 5 seconds\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Add your styles here */\r\n  </style>\r\n  -->\r\n\r\n\r\n<template>\r\n    <div class=\"dashboard-container\">\r\n      <h1>Dashboard</h1>\r\n      <button @click=\"logout\" class=\"logout-btn\">Logout</button>\r\n      <Record @dataUpdated=\"fetchData\" />\r\n      <WordFrequencies :wordFrequencies=\"wordFrequencies\" />\r\n      <Top3Phrases :top3Phrases=\"top3Phrases\" />\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\n  import Record from './Record.vue';\r\n  import WordFrequencies from './WordFrequencies.vue';\r\n  import Top3Phrases from './Top3Phrases.vue';\r\n  \r\n  export default {\r\n    components: {\r\n      Record,\r\n      WordFrequencies,\r\n      Top3Phrases,\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        wordFrequencies: null,\r\n        top3Phrases: [],\r\n      };\r\n    },\r\n    \r\n    methods: {\r\n      async fetchData() {\r\n        await this.fetchWordFrequencies();\r\n        await this.fetchTop3Phrases();\r\n      },\r\n\r\n      async fetchWordFrequencies() {\r\n        try {\r\n          const response = await fetch('http://localhost:5000/word-frequencies', {\r\n            method: 'GET',\r\n            credentials: 'include'\r\n          });\r\n          if (response.ok) {\r\n            this.wordFrequencies = await response.json();\r\n          } else {\r\n            console.error('Failed to fetch word frequencies:', await response.json());\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching word frequencies:', error);\r\n        }\r\n      },\r\n\r\n      async fetchTop3Phrases() {\r\n        try {\r\n          const response = await fetch('http://localhost:5000/top-3-phrases', {\r\n            method: 'GET',\r\n            credentials: 'include'\r\n          });\r\n          if (response.ok) {\r\n            this.top3Phrases = await response.json();\r\n          } else {\r\n            console.error('Failed to fetch top 3 phrases:', await response.json());\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching top 3 phrases:', error);\r\n        }\r\n      },\r\n\r\n      async logout() {\r\n        try {\r\n          const response = await fetch('http://localhost:5000/logout', {\r\n            method: 'GET',\r\n            credentials: 'include'\r\n          });\r\n          if (response.ok) {\r\n            // Redirect to home page after logout\r\n            window.location.href = '/';\r\n          } else {\r\n            console.error('Failed to logout:', await response.json());\r\n          }\r\n        } catch (error) {\r\n          console.error('Error logging out:', error);\r\n        }\r\n      },\r\n    },\r\n\r\n    mounted() {\r\n      this.fetchData();\r\n      setInterval(this.fetchData, 5000); // Poll every 5 seconds\r\n    },\r\n  };\r\n</script>\r\n  \r\n<style scoped>\r\n.dashboard-container {\r\n  max-width: 800px;\r\n  margin: auto;\r\n  padding: 20px;\r\n}\r\n\r\n.logout-btn {\r\n  background-color: #f44336;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.logout-btn:hover {\r\n  background-color: #d32f2f;\r\n}\r\n</style>\r\n  "],"mappings":"AAsFE,OAAOA,MAAK,MAAO,cAAc;AACjC,OAAOC,eAAc,MAAO,uBAAuB;AACnD,OAAOC,WAAU,MAAO,mBAAmB;AAE3C,eAAe;EACbC,UAAU,EAAE;IACVH,MAAM;IACNC,eAAe;IACfC;EACF,CAAC;EAEDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,eAAe,EAAE,IAAI;MACrBC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EAEDC,OAAO,EAAE;IACP,MAAMC,SAASA,CAAA,EAAG;MAChB,MAAM,IAAI,CAACC,oBAAoB,CAAC,CAAC;MACjC,MAAM,IAAI,CAACC,gBAAgB,CAAC,CAAC;IAC/B,CAAC;IAED,MAAMD,oBAAoBA,CAAA,EAAG;MAC3B,IAAI;QACF,MAAME,QAAO,GAAI,MAAMC,KAAK,CAAC,wCAAwC,EAAE;UACrEC,MAAM,EAAE,KAAK;UACbC,WAAW,EAAE;QACf,CAAC,CAAC;QACF,IAAIH,QAAQ,CAACI,EAAE,EAAE;UACf,IAAI,CAACV,eAAc,GAAI,MAAMM,QAAQ,CAACK,IAAI,CAAC,CAAC;QAC9C,OAAO;UACLC,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAE,MAAMP,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC;QAC3E;MACF,EAAE,OAAOE,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC;IAED,MAAMR,gBAAgBA,CAAA,EAAG;MACvB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,qCAAqC,EAAE;UAClEC,MAAM,EAAE,KAAK;UACbC,WAAW,EAAE;QACf,CAAC,CAAC;QACF,IAAIH,QAAQ,CAACI,EAAE,EAAE;UACf,IAAI,CAACT,WAAU,GAAI,MAAMK,QAAQ,CAACK,IAAI,CAAC,CAAC;QAC1C,OAAO;UACLC,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAE,MAAMP,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC;QACxE;MACF,EAAE,OAAOE,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IAED,MAAMC,MAAMA,CAAA,EAAG;MACb,IAAI;QACF,MAAMR,QAAO,GAAI,MAAMC,KAAK,CAAC,8BAA8B,EAAE;UAC3DC,MAAM,EAAE,KAAK;UACbC,WAAW,EAAE;QACf,CAAC,CAAC;QACF,IAAIH,QAAQ,CAACI,EAAE,EAAE;UACf;UACAK,MAAM,CAACC,QAAQ,CAACC,IAAG,GAAI,GAAG;QAC5B,OAAO;UACLL,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAE,MAAMP,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC;QAC3D;MACF,EAAE,OAAOE,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC5C;IACF;EACF,CAAC;EAEDK,OAAOA,CAAA,EAAG;IACR,IAAI,CAACf,SAAS,CAAC,CAAC;IAChBgB,WAAW,CAAC,IAAI,CAAChB,SAAS,EAAE,IAAI,CAAC,EAAE;EACrC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}