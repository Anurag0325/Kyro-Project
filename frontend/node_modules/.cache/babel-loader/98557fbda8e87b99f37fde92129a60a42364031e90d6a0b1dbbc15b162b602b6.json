{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-18e87d7c\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Top 3 Unique Phrases\", -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.top3Phrases, (phrase, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index\n    }, _toDisplayString(phrase[0]) + \" - \" + _toDisplayString(phrase[1]) + \" times \", 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","top3Phrases","phrase","index","key","_toDisplayString"],"sources":["B:\\Kyro Project\\Speech Recognition Project\\frontend\\src\\components\\Top3Phrases.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>Top 3 Unique Phrases</h2>\r\n      <ul>\r\n        <li v-for=\"(phrase, index) in top3Phrases\" :key=\"index\">\r\n          {{ phrase[0] }} - {{ phrase[1] }} times\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        top3Phrases: []\r\n      };\r\n    },\r\n    methods: {\r\n      async fetchTop3Phrases() {\r\n        try {\r\n          const userId = 1; // Replace with dynamic user ID retrieval\r\n          const response = await fetch(`http://localhost:5000/top-3-phrases?user_id=${userId}`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            this.top3Phrases = data.top_3_phrases;\r\n          } else {\r\n            console.error('Failed to fetch top 3 phrases:', await response.json());\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching top 3 phrases:', error);\r\n        }\r\n      },\r\n      // startPolling() {\r\n      //   this.fetchTop3Phrases();\r\n      //   setInterval(this.fetchTop3Phrases, 2000); // Poll every 5 seconds\r\n      // }\r\n    },\r\n    mounted() {\r\n      this.fetchTop3Phrases();\r\n      // this.startPolling();\r\n    },\r\n\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Add any necessary styles here */\r\n  </style>\r\n  "],"mappings":";;gEAEMA,mBAAA,CAA6B,YAAzB,sBAAoB;;uBAD1BC,mBAAA,CAOM,cANJC,UAA6B,EAC7BF,mBAAA,CAIK,c,kBAHHC,mBAAA,CAEKE,SAAA,QANbC,WAAA,CAIsCC,KAAA,CAAAC,WAAW,EAJjD,CAIoBC,MAAM,EAAEC,KAAK;yBAAzBP,mBAAA,CAEK;MAFuCQ,GAAG,EAAED;IAAK,GAAAE,gBAAA,CACjDH,MAAM,OAAM,KAAG,GAAAG,gBAAA,CAAGH,MAAM,OAAM,SACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}