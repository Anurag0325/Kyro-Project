{"ast":null,"code":"export default {\n  data() {\n    return {\n      recognizedText: '',\n      translatedText: ''\n    };\n  },\n  methods: {\n    async recordAndTranslate() {\n      const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n      recognition.lang = 'en-US';\n      recognition.interimResults = false;\n      recognition.maxAlternatives = 1;\n      recognition.start();\n      recognition.onresult = async event => {\n        const speechResult = event.results[0][0].transcript;\n        console.log('Result:', speechResult);\n        try {\n          const response = await fetch('/record', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              text: speechResult\n            })\n          });\n          if (response.ok) {\n            const data = await response.json();\n            this.recognizedText = data.recognized;\n            this.translatedText = data.translated;\n          } else {\n            console.error('Failed to fetch translation.');\n          }\n        } catch (error) {\n          console.error('An error occurred:', error);\n        }\n      };\n      recognition.onerror = event => {\n        console.error('Error occurred in recognition:', event.error);\n      };\n      recognition.onend = () => {\n        recognition.stop();\n      };\n    }\n  }\n};","map":{"version":3,"names":["data","recognizedText","translatedText","methods","recordAndTranslate","recognition","window","SpeechRecognition","webkitSpeechRecognition","lang","interimResults","maxAlternatives","start","onresult","event","speechResult","results","transcript","console","log","response","fetch","method","headers","body","JSON","stringify","text","ok","json","recognized","translated","error","onerror","onend","stop"],"sources":["B:\\Kyro Project\\Speech Recognition Project\\frontend\\src\\components\\Record.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1>Speech Recognition and Translation App</h1>\r\n      <button @click=\"recordAndTranslate\">Record and Translate</button>\r\n      <p v-if=\"recognizedText\">Recognized: {{ recognizedText }}</p>\r\n      <p v-if=\"translatedText\">Translated: {{ translatedText }}</p>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        recognizedText: '',\r\n        translatedText: ''\r\n      };\r\n    },\r\n    methods: {\r\n      async recordAndTranslate() {\r\n        const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n        recognition.lang = 'en-US';\r\n        recognition.interimResults = false;\r\n        recognition.maxAlternatives = 1;\r\n  \r\n        recognition.start();\r\n  \r\n        recognition.onresult = async (event) => {\r\n          const speechResult = event.results[0][0].transcript;\r\n          console.log('Result:', speechResult);\r\n  \r\n          try {\r\n            const response = await fetch('/record', {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify({ text: speechResult })\r\n            });\r\n  \r\n            if (response.ok) {\r\n              const data = await response.json();\r\n              this.recognizedText = data.recognized;\r\n              this.translatedText = data.translated;\r\n            } else {\r\n              console.error('Failed to fetch translation.');\r\n            }\r\n          } catch (error) {\r\n            console.error('An error occurred:', error);\r\n          }\r\n        };\r\n  \r\n        recognition.onerror = (event) => {\r\n          console.error('Error occurred in recognition:', event.error);\r\n        };\r\n  \r\n        recognition.onend = () => {\r\n          recognition.stop();\r\n        };\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style>\r\n  /* Add your styles here */\r\n  </style>\r\n  "],"mappings":"AAUE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,cAAc,EAAE,EAAE;MAClBC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,kBAAkBA,CAAA,EAAG;MACzB,MAAMC,WAAU,GAAI,KAAKC,MAAM,CAACC,iBAAgB,IAAKD,MAAM,CAACE,uBAAuB,EAAE,CAAC;MACtFH,WAAW,CAACI,IAAG,GAAI,OAAO;MAC1BJ,WAAW,CAACK,cAAa,GAAI,KAAK;MAClCL,WAAW,CAACM,eAAc,GAAI,CAAC;MAE/BN,WAAW,CAACO,KAAK,CAAC,CAAC;MAEnBP,WAAW,CAACQ,QAAO,GAAI,MAAOC,KAAK,IAAK;QACtC,MAAMC,YAAW,GAAID,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,UAAU;QACnDC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEJ,YAAY,CAAC;QAEpC,IAAI;UACF,MAAMK,QAAO,GAAI,MAAMC,KAAK,CAAC,SAAS,EAAE;YACtCC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACP,cAAc,EAAE;YAClB,CAAC;YACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cAAEC,IAAI,EAAEZ;YAAa,CAAC;UAC7C,CAAC,CAAC;UAEF,IAAIK,QAAQ,CAACQ,EAAE,EAAE;YACf,MAAM5B,IAAG,GAAI,MAAMoB,QAAQ,CAACS,IAAI,CAAC,CAAC;YAClC,IAAI,CAAC5B,cAAa,GAAID,IAAI,CAAC8B,UAAU;YACrC,IAAI,CAAC5B,cAAa,GAAIF,IAAI,CAAC+B,UAAU;UACvC,OAAO;YACLb,OAAO,CAACc,KAAK,CAAC,8BAA8B,CAAC;UAC/C;QACF,EAAE,OAAOA,KAAK,EAAE;UACdd,OAAO,CAACc,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC5C;MACF,CAAC;MAED3B,WAAW,CAAC4B,OAAM,GAAKnB,KAAK,IAAK;QAC/BI,OAAO,CAACc,KAAK,CAAC,gCAAgC,EAAElB,KAAK,CAACkB,KAAK,CAAC;MAC9D,CAAC;MAED3B,WAAW,CAAC6B,KAAI,GAAI,MAAM;QACxB7B,WAAW,CAAC8B,IAAI,CAAC,CAAC;MACpB,CAAC;IACH;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}