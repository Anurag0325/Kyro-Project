{"ast":null,"code":"export default {\n  data() {\n    return {\n      recognizedText: null,\n      translatedText: null,\n      userId: 1\n    };\n  },\n  methods: {\n    async recordAndTranslate() {\n      try {\n        const response = await fetch('http://localhost:5000/record', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          // Optionally, send data if needed\n          // body: JSON.stringify({})\n          body: JSON.stringify({\n            user_id: this.userId\n          })\n        });\n        const data = await response.json();\n        this.recognizedText = data.recognized;\n        this.translatedText = data.translated;\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","recognizedText","translatedText","userId","methods","recordAndTranslate","response","fetch","method","headers","body","JSON","stringify","user_id","json","recognized","translated","error","console"],"sources":["B:\\Kyro Project\\Speech Recognition Project\\frontend\\src\\components\\Record.vue"],"sourcesContent":["<!-- <template>\r\n  <div>\r\n    <h1>Speech Recognition and Translation App</h1>\r\n    <button @click=\"recordAndTranslate\" :disabled=\"recording\">Record and Translate</button>\r\n    <p v-if=\"recognizedText\">Recognized: {{ recognizedText }}</p>\r\n    <p v-if=\"translatedText\">Translated: {{ translatedText }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      recognizedText: '',\r\n      translatedText: '',\r\n      recording: false,\r\n      recognition: null,\r\n    };\r\n  },\r\n  methods: {\r\n    async recordAndTranslate() {\r\n      if (this.recording) return; // Prevent multiple recordings\r\n\r\n      this.recording = true;\r\n      this.recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n      this.recognition.lang = 'en-US';\r\n      this.recognition.interimResults = false;\r\n      this.recognition.maxAlternatives = 1;\r\n\r\n      this.recognition.start();\r\n\r\n      this.recognition.onresult = async (event) => {\r\n        const speechResult = event.results[0][0].transcript.trim();\r\n        console.log('Result: ', speechResult);\r\n\r\n        try {\r\n          const response = await fetch('/record', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ text: speechResult }),\r\n          });\r\n\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            this.recognizedText = data.recognized;\r\n            this.translatedText = data.translated;\r\n          } else {\r\n            console.error('Failed to fetch translation.');\r\n          }\r\n        } catch (error) {\r\n          console.error('Error in fetch:', error);\r\n        } finally {\r\n          this.recognition.stop();\r\n          this.recording = false;\r\n        }\r\n      };\r\n\r\n      this.recognition.onerror = (event) => {\r\n        console.error('Error occurred in recognition: ', event.error);\r\n        this.recognition.stop();\r\n        this.recording = false;\r\n      };\r\n    },\r\n  },\r\n  beforeDestroy() {\r\n    if (this.recognition) {\r\n      this.recognition.stop();\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n/* Add your styles here */\r\n</style> -->\r\n\r\n\r\n<template>\r\n  <div>\r\n    <h1>Record and Translate</h1>\r\n    <button @click=\"recordAndTranslate\">Record and Translate</button>\r\n    <div v-if=\"recognizedText\">\r\n      <p>Recognized: {{ recognizedText }}</p>\r\n      <p>Translated: {{ translatedText }}</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      recognizedText: null,\r\n      translatedText: null,\r\n      userId: 1,\r\n    };\r\n  },\r\n  methods: {\r\n    async recordAndTranslate() {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/record', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          // Optionally, send data if needed\r\n          // body: JSON.stringify({})\r\n          body: JSON.stringify({ user_id: this.userId })\r\n        });\r\n        const data = await response.json();\r\n        this.recognizedText = data.recognized;\r\n        this.translatedText = data.translated;\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Your component-specific styles here */\r\n</style>\r\n"],"mappings":"AA2FA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,cAAc,EAAE,IAAI;MACpBC,cAAc,EAAE,IAAI;MACpBC,MAAM,EAAE;IACV,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,kBAAkBA,CAAA,EAAG;MACzB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,8BAA8B,EAAE;UAC3DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACD;UACA;UACAC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,OAAO,EAAE,IAAI,CAACV;UAAO,CAAC;QAC/C,CAAC,CAAC;QACF,MAAMH,IAAG,GAAI,MAAMM,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAClC,IAAI,CAACb,cAAa,GAAID,IAAI,CAACe,UAAU;QACrC,IAAI,CAACb,cAAa,GAAIF,IAAI,CAACgB,UAAU;MACvC,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}