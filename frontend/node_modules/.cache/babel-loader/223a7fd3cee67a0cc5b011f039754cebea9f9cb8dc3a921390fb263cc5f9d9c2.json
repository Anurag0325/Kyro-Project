{"ast":null,"code":"export default {\n  data() {\n    return {\n      recognizedText: '',\n      translatedText: ''\n    };\n  },\n  methods: {\n    async recordAndTranslate() {\n      // Here you would use the Web Speech API for recording\n      const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n      recognition.lang = 'en-US';\n      recognition.interimResults = false;\n      recognition.maxAlternatives = 1;\n      recognition.start();\n      recognition.onresult = async event => {\n        const speechResult = event.results[0][0].transcript;\n        console.log('Result: ', speechResult);\n        const response = await fetch('/record', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            text: speechResult\n          })\n        });\n        const data = await response.json();\n        this.recognizedText = data.recognized;\n        this.translatedText = data.translated;\n      };\n      recognition.onspeechend = () => {\n        recognition.stop();\n      };\n      recognition.onerror = event => {\n        console.error('Error occurred in recognition: ', event.error);\n      };\n    }\n  }\n};","map":{"version":3,"names":["data","recognizedText","translatedText","methods","recordAndTranslate","recognition","window","SpeechRecognition","webkitSpeechRecognition","lang","interimResults","maxAlternatives","start","onresult","event","speechResult","results","transcript","console","log","response","fetch","method","headers","body","JSON","stringify","text","json","recognized","translated","onspeechend","stop","onerror","error"],"sources":["B:\\Kyro Project\\Speech Recognition Project\\frontend\\src\\components\\Record.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1>Speech Recognition and Translation App</h1>\r\n      <button @click=\"recordAndTranslate\">Record and Translate</button>\r\n      <p v-if=\"recognizedText\">Recognized: {{ recognizedText }}</p>\r\n      <p v-if=\"translatedText\">Translated: {{ translatedText }}</p>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        recognizedText: '',\r\n        translatedText: '',\r\n      };\r\n    },\r\n    methods: {\r\n      async recordAndTranslate() {\r\n        // Here you would use the Web Speech API for recording\r\n        const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n        recognition.lang = 'en-US';\r\n        recognition.interimResults = false;\r\n        recognition.maxAlternatives = 1;\r\n  \r\n        recognition.start();\r\n  \r\n        recognition.onresult = async (event) => {\r\n          const speechResult = event.results[0][0].transcript;\r\n          console.log('Result: ', speechResult);\r\n  \r\n          const response = await fetch('/record', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ text: speechResult }),\r\n          });\r\n          const data = await response.json();\r\n  \r\n          this.recognizedText = data.recognized;\r\n          this.translatedText = data.translated;\r\n        };\r\n  \r\n        recognition.onspeechend = () => {\r\n          recognition.stop();\r\n        };\r\n  \r\n        recognition.onerror = (event) => {\r\n          console.error('Error occurred in recognition: ', event.error);\r\n        };\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style>\r\n  /* Add your styles here */\r\n  </style>\r\n  "],"mappings":"AAUE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,cAAc,EAAE,EAAE;MAClBC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,kBAAkBA,CAAA,EAAG;MACzB;MACA,MAAMC,WAAU,GAAI,KAAKC,MAAM,CAACC,iBAAgB,IAAKD,MAAM,CAACE,uBAAuB,EAAE,CAAC;MACtFH,WAAW,CAACI,IAAG,GAAI,OAAO;MAC1BJ,WAAW,CAACK,cAAa,GAAI,KAAK;MAClCL,WAAW,CAACM,eAAc,GAAI,CAAC;MAE/BN,WAAW,CAACO,KAAK,CAAC,CAAC;MAEnBP,WAAW,CAACQ,QAAO,GAAI,MAAOC,KAAK,IAAK;QACtC,MAAMC,YAAW,GAAID,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,UAAU;QACnDC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEJ,YAAY,CAAC;QAErC,MAAMK,QAAO,GAAI,MAAMC,KAAK,CAAC,SAAS,EAAE;UACtCC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,IAAI,EAAEZ;UAAa,CAAC;QAC7C,CAAC,CAAC;QACF,MAAMf,IAAG,GAAI,MAAMoB,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAElC,IAAI,CAAC3B,cAAa,GAAID,IAAI,CAAC6B,UAAU;QACrC,IAAI,CAAC3B,cAAa,GAAIF,IAAI,CAAC8B,UAAU;MACvC,CAAC;MAEDzB,WAAW,CAAC0B,WAAU,GAAI,MAAM;QAC9B1B,WAAW,CAAC2B,IAAI,CAAC,CAAC;MACpB,CAAC;MAED3B,WAAW,CAAC4B,OAAM,GAAKnB,KAAK,IAAK;QAC/BI,OAAO,CAACgB,KAAK,CAAC,iCAAiC,EAAEpB,KAAK,CAACoB,KAAK,CAAC;MAC/D,CAAC;IACH;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}