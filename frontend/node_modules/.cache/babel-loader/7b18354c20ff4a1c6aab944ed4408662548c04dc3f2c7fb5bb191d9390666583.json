{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-aae30ed8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Dashboard\", -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Record = _resolveComponent(\"Record\");\n  const _component_WordFrequencies = _resolveComponent(\"WordFrequencies\");\n  const _component_Top3Phrases = _resolveComponent(\"Top3Phrases\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.logout && $options.logout(...args))\n  }, \"Logout\"), _createVNode(_component_Record, {\n    onDataUpdated: $options.fetchData\n  }, null, 8 /* PROPS */, [\"onDataUpdated\"]), _createVNode(_component_WordFrequencies, {\n    wordFrequencies: $data.wordFrequencies\n  }, null, 8 /* PROPS */, [\"wordFrequencies\"]), _createVNode(_component_Top3Phrases, {\n    top3Phrases: $data.top3Phrases\n  }, null, 8 /* PROPS */, [\"top3Phrases\"])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","onClick","_cache","args","$options","logout","_createVNode","_component_Record","onDataUpdated","fetchData","_component_WordFrequencies","wordFrequencies","$data","_component_Top3Phrases","top3Phrases"],"sources":["B:\\Kyro Project\\Speech Recognition Project\\frontend\\src\\components\\Dashboard.vue"],"sourcesContent":["<!-- <template>\r\n    <div>\r\n      <h1>Dashboard</h1>\r\n      <Record @dataUpdated=\"fetchData\" />\r\n      <WordFrequencies :wordFrequencies=\"wordFrequencies\" />\r\n      <Top3Phrases :top3Phrases=\"top3Phrases\" />\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import Record from './Record.vue';\r\n  import WordFrequencies from './WordFrequencies.vue';\r\n  import Top3Phrases from './Top3Phrases.vue';\r\n  \r\n  export default {\r\n    components: {\r\n      Record,\r\n      WordFrequencies,\r\n      Top3Phrases,\r\n    },\r\n    data() {\r\n      return {\r\n        wordFrequencies: null,\r\n        top3Phrases: [],\r\n      };\r\n    },\r\n    methods: {\r\n      async fetchData() {\r\n        await this.fetchWordFrequencies();\r\n        await this.fetchTop3Phrases();\r\n      },\r\n      async fetchWordFrequencies() {\r\n        try {\r\n          const response = await fetch('http://localhost:5000/word-frequencies', {\r\n            method: 'GET',\r\n            credentials: 'include'\r\n          });\r\n          if (response.ok) {\r\n            this.wordFrequencies = await response.json();\r\n          } else {\r\n            console.error('Failed to fetch word frequencies:', await response.json());\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching word frequencies:', error);\r\n        }\r\n      },\r\n      async fetchTop3Phrases() {\r\n        try {\r\n          const response = await fetch('http://localhost:5000/top-3-phrases', {\r\n            method: 'GET',\r\n            credentials: 'include'\r\n          });\r\n          if (response.ok) {\r\n            this.top3Phrases = await response.json();\r\n          } else {\r\n            console.error('Failed to fetch top 3 phrases:', await response.json());\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching top 3 phrases:', error);\r\n        }\r\n      },\r\n    },\r\n    mounted() {\r\n      this.fetchData();\r\n      setInterval(this.fetchData, 5000); // Poll every 5 seconds\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Add your styles here */\r\n  </style>\r\n  -->\r\n\r\n\r\n  <template>\r\n    <div>\r\n      <h1>Dashboard</h1>\r\n      <button @click=\"logout\">Logout</button>\r\n      <Record @dataUpdated=\"fetchData\" />\r\n      <WordFrequencies :wordFrequencies=\"wordFrequencies\" />\r\n      <Top3Phrases :top3Phrases=\"top3Phrases\" />\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import Record from './Record.vue';\r\n  import WordFrequencies from './WordFrequencies.vue';\r\n  import Top3Phrases from './Top3Phrases.vue';\r\n  \r\n  export default {\r\n    components: {\r\n      Record,\r\n      WordFrequencies,\r\n      Top3Phrases,\r\n    },\r\n    data() {\r\n      return {\r\n        wordFrequencies: null,\r\n        top3Phrases: [],\r\n      };\r\n    },\r\n    methods: {\r\n      async fetchData() {\r\n        await this.fetchWordFrequencies();\r\n        await this.fetchTop3Phrases();\r\n      },\r\n      async fetchWordFrequencies() {\r\n        try {\r\n          const response = await fetch('http://localhost:5000/word-frequencies', {\r\n            method: 'GET',\r\n            credentials: 'include'\r\n          });\r\n          if (response.ok) {\r\n            this.wordFrequencies = await response.json();\r\n          } else {\r\n            console.error('Failed to fetch word frequencies:', await response.json());\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching word frequencies:', error);\r\n        }\r\n      },\r\n      async fetchTop3Phrases() {\r\n        try {\r\n          const response = await fetch('http://localhost:5000/top-3-phrases', {\r\n            method: 'GET',\r\n            credentials: 'include'\r\n          });\r\n          if (response.ok) {\r\n            this.top3Phrases = await response.json();\r\n          } else {\r\n            console.error('Failed to fetch top 3 phrases:', await response.json());\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching top 3 phrases:', error);\r\n        }\r\n      },\r\n      async logout() {\r\n        try {\r\n          const response = await fetch('http://localhost:5000/logout', {\r\n            method: 'GET',\r\n            credentials: 'include'\r\n          });\r\n          if (response.ok) {\r\n            // Redirect to home page after logout\r\n            window.location.href = '/';\r\n          } else {\r\n            console.error('Failed to logout:', await response.json());\r\n          }\r\n        } catch (error) {\r\n          console.error('Error logging out:', error);\r\n        }\r\n      },\r\n    },\r\n    mounted() {\r\n      this.fetchData();\r\n      setInterval(this.fetchData, 5000); // Poll every 5 seconds\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Add your styles here */\r\n  </style>\r\n  "],"mappings":";;gEA6EMA,mBAAA,CAAkB,YAAd,WAAS;;;;;uBADfC,mBAAA,CAMM,cALJC,UAAkB,EAClBF,mBAAA,CAAuC;IAA9BG,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,MAAA,IAAAD,QAAA,CAAAC,MAAA,IAAAF,IAAA,CAAM;KAAE,QAAM,GAC9BG,YAAA,CAAmCC,iBAAA;IAA1BC,aAAW,EAAEJ,QAAA,CAAAK;EAAS,4CAC/BH,YAAA,CAAsDI,0BAAA;IAApCC,eAAe,EAAEC,KAAA,CAAAD;EAAe,8CAClDL,YAAA,CAA0CO,sBAAA;IAA5BC,WAAW,EAAEF,KAAA,CAAAE;EAAW,yC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}